How did viewing a diff between two versions
of a file help you see the bug that was
introduced?
It helped me pinpoint the differences of 
the two files and even though many changes
were intentional, I could clearly see what
the user changed between the two versions.
Because of this, I could easily identify any
typos or even see flawed logic

How could having easy access to the entire
history of a file make you a more efficient
programmer in the long term?
When something doesn't work and you don't know
why but you do know that it worked before, you
can easily grab the old version and compare it
to the new one and identify the differences
and analyze.

What do you think are the pros and cons of
manually choosing when to create a commit, 
like you do in Git, vs having versions automatically
saved,like Google docs does?
I'm usually the person that always forgets to save
and so when my computer crashes, I'm always thankful
that it automatically saved my work because I would
be really annoyed to type it out again. However,
because this is code, it makes more sense to commit
manually because it allows you to logically separate
the commits and for some reason your computer crashes,
since you already figured out the logic, it shouldn't
be too hard to recode.

Why do you think some version control systems, like Git,
allow saving multiple files in one commit, while others,
like Google Docs, treat each file separately?
It's especially useful when you make a change relevant
to the code as a whole, such as a class and the driver. 
However, in Google Docs, the documents are rarely related
to each other so it makes no sense to save all of 
them when you save one.

How do you want to use Git?
I would like to use github to collaborate with my fellow
workers on code so that I won't be afraid to change it
without wrecking the code. I would also like to use
it more often for robotics.